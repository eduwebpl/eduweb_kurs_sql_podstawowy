-- Stworzenie tabeli którą chcemy zapełnić dużą ilością danych
CREATE TABLE big_data (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    big_number int,
    some_text varchar(100),
    random_price numeric(10,2)
);

-- Wyświetlenie tablicy 5-cio elementowej (jedno-wymiarowej)
SELECT ARRAY[0,1,2,4,5];

-- Wykorzystanie funkcji unnest do przekształcenia tablicy w zestaw rekordów
SELECT UNNEST(ARRAY[0,1,2,4,5]);

-- Zapytanie zwracające 10 cyfr w zakresie 0-9
SELECT * FROM (SELECT UNNEST(ARRAY[0,1,2,3,4,5,6,7,8,9])) AS single_values;

-- Uzyskanie dwóch unikalnych kolumn, pierwsza daje nam dziesiątki, druga jedności
SELECT * FROM (SELECT UNNEST(ARRAY[0,1,2,3,4,5,6,7,8,9])) AS single_values
   CROSS JOIN (SELECT UNNEST(ARRAY[0,1,2,3,4,5,6,7,8,9])) AS extended_values;

-- Stworzenie widoku z pełnym zapytaniem generującym liczby aż do 1000
CREATE VIEW generate_data AS
    SELECT hundreds*100 + tens*10 + ones AS numbers
          FROM (SELECT UNNEST(ARRAY[0,1,2,3,4,5,6,7,8,9]) AS tens) AS ten
    CROSS JOIN (SELECT UNNEST(ARRAY[0,1,2,3,4,5,6,7,8,9]) AS ones) AS one
    CROSS JOIN (SELECT UNNEST(ARRAY[0,1,2,3,4,5,6,7,8,9]) AS hundreds) AS hundred
    ORDER BY numbers;

-- Stworzenie widoku generującego zestaw liter (jak słowow) ak wyżej
CREATE VIEW generate_chars AS
    SELECT CHR(gd1.numbers)
	  FROM generate_data gd1
    CROSS JOIN generate_data gd2
    WHERE gd1.numbers BETWEEN 33 AND 126;

-- Stworzenie widoku generującego losowe ciągi znaków (dzięki grupowaniu po losowej wartości)
CREATE VIEW random_strings AS
    SELECT string_agg(chr, '') AS random_string
    FROM generate_chars
    GROUP BY ROUND(RANDOM()*10000);

-- Zapytanie wypełniające tablicę 'big_data' ok. 10000 rekordów
INSERT INTO big_data (big_number, some_text, random_price)
    SELECT ROUND(RANDOM()*10^7),
	   random_string,
	   CAST(RANDOM()*1000 AS DECIMAL(10,2))
    FROM random_strings;
